// Импортируем необходимые библиотеки и компоненты.
import React from 'react'; // Импортируем React для создания компонентов.
import ReactDOM from 'react-dom/client'; // Импортируем метод для рендеринга в DOM.
import App from './App.jsx'; // Импортируем корневой компонент App.
import './index.css'; // Импортируем глобальные стили.
import { BrowserRouter } from 'react-router-dom'; // Импортируем BrowserRouter для управления маршрутизацией.
import StoreContextProvider from './context/StoreContext.jsx'; // Импортируем провайдер контекста StoreContext.

ReactDOM.createRoot(document.getElementById('root')).render(
    // Оборачиваем приложение в BrowserRouter для поддержки маршрутизации.
    <BrowserRouter>
        {/* Оборачиваем приложение в StoreContextProvider для предоставления контекста состояния. */}
        <StoreContextProvider>
            {/* Рендерим корневой компонент App. */}
            <App />
        </StoreContextProvider>
    </BrowserRouter>
);



// Импорт библиотек и компонентов:
// React - импортируется для создания и работы с компонентами.
// ReactDOM - импортируется для рендеринга компонентов React в DOM.
// App - импортируется основной компонент приложения.
// index.css - импортируются глобальные стили для приложения.
// BrowserRouter - импортируется компонент маршрутизатора из react-router-dom, который используется для управления маршрутизацией в приложении.
// StoreContextProvider - импортируется провайдер контекста состояния приложения.

// Рендеринг приложения:
// ReactDOM.createRoot(document.getElementById('root')).render(...) - находит корневой элемент с id='root' в HTML-документе и рендерит в него приложение.
// Используется метод createRoot для создания корня рендеринга, что обеспечивает поддержку новых возможностей React (например, concurrent mode).

// Оборачивание приложения:
// <BrowserRouter> - оборачивает приложение для поддержки маршрутизации. Это позволяет использовать компоненты маршрутизации (Route, Routes, Link, и т.д.) внутри приложения.
// <StoreContextProvider> - оборачивает приложение для предоставления контекста состояния. Это позволяет любому компоненту внутри приложения получать доступ к состоянию и действиям, определенным в StoreContext.

// Рендеринг компонента App:
// <App /> - корневой компонент приложения, который содержит всю логику и структуру приложения.
// Этот файл устанавливает корневую структуру приложения, подключает глобальные стили, маршрутизацию и контекст состояния, создавая тем самым основу для всего React-приложения.








