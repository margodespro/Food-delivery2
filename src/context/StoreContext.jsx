// Импортируем необходимые библиотеки и файлы.
import React, { createContext, useState } from "react"; // Импортируем React, createContext и useState из библиотеки React.
import { food_list } from "../assets/assets"; // Импортируем список продуктов из файла assets.js.

// Создаем контекст StoreContext.
export const StoreContext = createContext(null);

// Определяем компонент StoreContextProvider, который будет оборачивать другие компоненты и предоставлять им контекст.
const StoreContextProvider = (props) => {
    // Используем useState для управления состоянием корзины.
    const [cartItems, setCartItems] = useState({});

    // Функция для добавления элемента в корзину.
    const addToCart = (itemId) => {
        setCartItems((prev) => ({
            ...prev, // Копируем предыдущее состояние корзины.
            [itemId]: (prev[itemId] || 0) + 1 // Увеличиваем количество выбранного товара на 1. Если товара еще нет в корзине, устанавливаем его количество на 1.
        }));
    };

    // Функция для удаления элемента из корзины.
    const removeFromCart = (itemId) => {
        if (cartItems[itemId] > 0) { // Проверяем, что количество товара больше 0.
            setCartItems((prev) => ({
                ...prev, // Копируем предыдущее состояние корзины.
                [itemId]: prev[itemId] - 1 // Уменьшаем количество выбранного товара на 1.
            }));
        }
    };

    // Функция для получения общего количества товаров в корзине.
    const getTotalCartAmount = () => {
        const totalItems = Object.values(cartItems).reduce(
            (total, count) => total + count, // Суммируем количество каждого товара в корзине.
            0 // Начальное значение суммы.
        );
        return totalItems; // Возвращаем общее количество товаров.
    };

    // Создаем объект contextValue, который будет предоставлен всем дочерним компонентам.
    const contextValue = {
        food_list, // Список продуктов.
        cartItems, // Текущее состояние корзины.
        addToCart, // Функция для добавления товара в корзину.
        removeFromCart, // Функция для удаления товара из корзины.
        getTotalCartAmount // Функция для получения общего количества товаров в корзине.
    };

    // Возвращаем компонент провайдера контекста с переданным значением contextValue.
    return (
        <StoreContext.Provider value={contextValue}>
            {props.children} {/* Рендерим дочерние компоненты, переданные в StoreContextProvider. */}
        </StoreContext.Provider>
    );
};

// Экспортируем компонент StoreContextProvider по умолчанию, чтобы его можно было использовать в других частях приложения.
export default StoreContextProvider;


// Импорт библиотек и файлов:
// Импортируются необходимые библиотеки из react (createContext, useState) и список продуктов из файла assets.

// Создание контекста:
// Создается контекст StoreContext с помощью createContext(null).

// Определение компонента StoreContextProvider:
// Этот компонент будет оборачивать другие компоненты и предоставлять им доступ к состоянию корзины и списку продуктов через контекст.

// Использование состояния:
// Используется хук useState для хранения состояния корзины (cartItems).

// Функции для управления корзиной:
// addToCart: Добавляет товар в корзину или увеличивает его количество, если он уже есть в корзине.
// removeFromCart: Уменьшает количество товара в корзине или удаляет его, если количество становится нулевым.
// getTotalCartAmount: Возвращает общее количество товаров в корзине, суммируя количество каждого товара.

// Создание объекта contextValue:
// Включает в себя список продуктов, текущее состояние корзины и функции для управления корзиной.

// Возвращение компонента Provider:
// StoreContext.Provider оборачивает дочерние компоненты, предоставляя им значение contextValue.

// Экспорт компонента:
// Компонент StoreContextProvider экспортируется по умолчанию, чтобы его можно было использовать в других частях приложения 
// для оборачивания компонентов, которым нужен доступ к контексту.
// Этот компонент предоставляет глобальное состояние корзины и функции для управления этим состоянием, 
// доступные всем компонентам, которые обернуты в StoreContextProvider.